package com.ethran.notable.utils

import com.onyx.android.sdk.api.device.epd.EpdController
import com.onyx.android.sdk.api.device.epd.UpdateMode
import com.onyx.android.sdk.api.device.epd.UpdateOption
import com.onyx.android.sdk.device.Device
import io.shipbook.shipbooksdk.ShipBook
import kotlinx.coroutines.delay

private val einkLogger = ShipBook.getLogger("einkHelper")

/**
 * ONYX EPD REFRESH MODES GUIDE (Generated by AI, better then nothing)
 * ============================================
 *
 * ### 1. Update Modes (Quality â†” Speed Tradeoff)
 * These control the balance between refresh speed and display quality:
 *
 * | Mode         | Description                                       |
 * |--------------|---------------------------------------------------|
 * | `GC`         | Full refresh (Best quality, slowest, no ghosting) |
 * | `GU`         | Grayscale update (Partial refresh, preserves tone)|
 * | `DU`         | Direct update (Faster, partial, moderate quality) |
 * | `ANIMATION`  | Smooth animation updates (some ghosting possible) |
 * | `A2`         | Fastest update (Lowest quality, minimal latency)  |
 * | `DEEP_GC`    | Deep clean refresh (Best for text rendering)      |
 *
 * ### 2. Display Schemes (System-Wide Presets)
 * Affect the global system behavior:
 *
 * | Scheme                        | Description                          |
 * |-------------------------------|--------------------------------------|
 * | `SCHEME_NORMAL`              | Default balanced e-ink mode          |
 * | `SCHEME_KEYBOARD`           | Optimized for keyboard input         |
 * | `SCHEME_SCRIBBLE`           | Best for handwriting/stylus input    |
 * | `SCHEME_APPLICATION_ANIMATION` | App-specific animation optimization |
 * | `SCHEME_SYSTEM_ANIMATION`   | System-wide animation optimization   |
 *
 * ### 3. Special Functions (System-Level Tools)
 *
 * | Function                  | Description                                      |
 * |---------------------------|--------------------------------------------------|
 * | `applyGCOnce()`           | Force one full-screen GC refresh                |
 * | `repaintEveryThing()`     | Repaints the entire screen with current mode    |
 * | `fillWhiteOnWakeup()`     | Clears residual ghosting on wake                |
 * | `useGCForNewSurface()`    | Forces GC when new surfaces appear              |
 * | `setEpdTurbo(int)`        | Adjusts refresh speed (0 = slow, 100 = fastest) |
 *
 * ### 4. View-Specific Controls
 * Fine-grained control per view:
 *
 * | Function                        | Description                                |
 * |----------------------------------|--------------------------------------------|
 * | `setViewDefaultUpdateMode()`    | Sets default update mode for a specific view |
 * | `resetViewUpdateMode()`         | Resets view update mode to system default   |
 * | `disableA2ForSpecificView()`    | Disables A2 mode for that view              |
 * | `handwritingRepaint()`          | Optimized refresh for handwriting regions   |
 *
 * ### 5. Waveform Controls (Advanced Tuning)
 *
 * | Function          | Description                            |
 * |-------------------|----------------------------------------|
 * | `enableRegal()`   | Enables Regal waveform for less ghosting |
 * | `disableRegal()`  | Disables Regal waveform                 |
 * | `setTrigger()`    | Sets waveform trigger count             |
 * | `byPass()`        | Skips scheduled waveform updates        |
 *
 * ### 6. Visual Enhancements
 * Adjust display contrast and rendering:
 *
 * | Function                        | Description                                  |
 * |----------------------------------|----------------------------------------------|
 * | `applyGammaCorrection()`        | Adjusts gamma curve for contrast             |
 * | `applyMonoLevel()`              | Controls monochrome intensity                |
 * | `applyColorFilter()`            | Adjusts color tones (for color e-ink only)   |
 * | `setWebViewContrastOptimize()`  | Enhances contrast in WebViews                |
 *
 * ### Common Usage Patterns:
 *
 * // For animations or video playback:
 * EpdController.setDisplayScheme(SCHEME_APPLICATION_ANIMATION)
 * EpdController.setViewDefaultUpdateMode(view, ANIMATION)
 *
 * // For standard reading mode:
 * EpdController.setDisplayScheme(SCHEME_NORMAL)
 * EpdController.applyGCOnce() // To remove ghosting
 *
 * // For handwriting or drawing apps:
 * EpdController.setDisplayScheme(SCHEME_SCRIBBLE)
 * EpdController.handwritingRepaint(inkView, dirtyRect)
 *
 * // To reset view to default behavior:
 * EpdController.resetViewUpdateMode(view)
 * EpdController.setDisplayScheme(SCHEME_NORMAL)
 */


/**
 * Toggles animation-optimized mode for smoother UI interactions.
 *
 * @param isAnimationMode true to enable fast/animation mode, false for normal refresh
 */
fun setAnimationMode(isAnimationMode: Boolean) {
// reference:
// https://github.com/onyx-intl/OnyxAndroidDemo/blob/d3a1ffd3af231fe4de60a2a0da692c17cb35ce31/app/OnyxPenDemo/src/main/java/com/onyx/android/eink/pen/demo/ui/PenDemoActivity.java#L500
    if (isAnimationMode) {
        EpdController.applyTransientUpdate(UpdateMode.ANIMATION)
        einkLogger.d("Animation mode enabled")
    } else {
        EpdController.clearTransientUpdate(true)
        einkLogger.d("Animation mode disabled")
    }
}

fun setRecommendedMode() {
    EpdController.setAppScopeRefreshMode(UpdateOption.NORMAL)
    einkLogger.d("Changed to NORMAL mode")
}

fun isRecommendedRefreshMode(): Boolean {
    val updateOption: UpdateOption = Device.currentDevice().appScopeRefreshMode
    return updateOption == UpdateOption.NORMAL || updateOption == UpdateOption.REGAL
}
fun getCurRefreshModeString(): String {
    return (Device.currentDevice().appScopeRefreshMode).toString()
}

suspend fun waitForEpdRefresh(updateOption: UpdateOption = Device.currentDevice().appScopeRefreshMode) {
    einkLogger.d("Waiting for screen, Update mode: $updateOption")
//        Device.currentDevice().waitForUpdateFinished()
    // depending on device, it may take different amount of time to
    // refresh the screen. So for example, when closing menus, we
    // need to wait before we freeze screen.
    when (updateOption) {
        UpdateOption.NORMAL -> {
            // HD mode
            delay(190 ) // On my device ~160 is the minimal delay
        }
        UpdateOption.REGAL -> {
            // regal mode
            delay(180) // On my device ~150 is the minimal delay
        }
        UpdateOption.FAST -> {
            //ultra fast, fast, balanced
            delay(20) // 5ms is problematic sometimes on balanced mode.
        }
        UpdateOption.FAST_X -> {
            // no idea what it is
            delay(4) // Minimal delay
        }
        UpdateOption.FAST_QUALITY -> {
            // no idea what it is
            delay(15)
        }
        else -> {
            // Default fallback
            delay(10)
        }
    }
}
